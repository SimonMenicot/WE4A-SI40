{% extends 'base.html.twig' %}

{% block body %}
<div id="classpage-main-separation" class="content-separator">
    <div id="main-class-content" class="class-content">
        <div class="class-title-content">
            <a class="class-back-link" href="/">
                <img src="{{ asset("/images/icons/back.png") }}">
            </a>
            <h1 id="class-title">
                Chargement...
            </h1>
        </div>
        <button class="main-button icon-button" id="save-button-top">
            <img src="{{ asset("/images/icons/save.png") }}"/>
            <span>Sauvegarder</span>
        </button>
        <div class="tabs-container" id="class-tabs">
            <div class="tabs-buttons">
                <button id="view-tab-button">Aperçu</button>
                <button id="edit-tab-button">Édition</button>
            </div>
            <div class="tabs-content" id="content-display">
            </div>
        </div>
        <button class="main-button icon-button" id="save-button-bottom">
            <img src="{{ asset("/images/icons/save.png") }}"/>
            <span>Sauvegarder</span>
        </button>
    </div>

    {% include 'sections/activity-thread.html.twig' %}

</div>

{% endblock %}

{% block javascripts %}

<script type="module">

import { DEFAULT_SECTION_TYPES_MAP } from "{{ asset("/scripts/classes/SectionTypesMap.js") }}"
import { TabsSelector } from "{{ asset("/scripts/elements/TabsSelector.js") }}"

class UeEditScript
{
    constructor(class_title, main_content, save_buttons, tabs_selector)
    {
        this._class_title = class_title;
        this._main_content = main_content;

        this._save_buttons = save_buttons;

        this._tabs_selector = tabs_selector;
    }

    async start()
    {
        let fetch_data = await fetch("/classes/{{ ue_id }}/get-content");

        if (fetch_data.status != 202) 
        {
            this._class_title.textContent = "Impossible d'accéder à ce cours";
            let error_span = this._main_content.appendChild(document.createElement("span"));
            error_span.classList.add("error");
            error_span.classList.add("result-text");

            for (let button of this._save_buttons)
            {
                this._main_content.removeChild(button);
            }

            switch (fetch_data.status)
            {
                case 401:
                error_span.innerText = "Vous devez d'abord vous connecter";
                break;

                case 403:
                error_span.innerText = "Vous n'avez pas la permission d'accéder à ce cours";
                break;

                default:
                error_span.innerText = "Une erreur s'est produite (" + fetch_data.status + ")";
                break;
            }
            return;
        }

        let data = await fetch_data.json();

        this._main_section = DEFAULT_SECTION_TYPES_MAP.export(data.content);
        this._class_title.textContent = data.name + " - " + data.description;

        this._last_json = JSON.stringify(this._main_section.json_data);

        this._html_base = this._main_content.appendChild(this._main_section.htmlElement);
        this._edit_html_base = this._main_content.appendChild(this._main_section.editableHtmlElement);

        for (let button of this._save_buttons)
        {
            button.setAttribute("disabled", "");
            
            button.addEventListener("click", async () => {
                for (let button of this._save_buttons)
                {
                    button.setAttribute("disabled", '');
                }

                if (await this.save())
                {
                    this._last_json = JSON.stringify(this._main_section.json_data);
                } else {
                    alert("an error occured while saving");

                    for (let button of this._save_buttons)
                    {
                        button.removeAttribute();
                    }
                }

            });

        }

        this._main_section.addEventListener("modified", (event) => {
            this.update(event);
        });
            
        this._tabs_selector.update();
    }

    async update(event)
    {
        if (event.detail.requires_reload)
        {
            let edit_new_html = this._main_section.editableHtmlElement;
            this._main_content.replaceChild(edit_new_html, this._edit_html_base);
            this._edit_html_base = edit_new_html;
        }

        let new_html = this._main_section.htmlElement;
        this._main_content.replaceChild(new_html, this._html_base);
        this._html_base = new_html;

        this._tabs_selector.update();

        if (this._last_json == JSON.stringify(this._main_section.json_data))
        {
            for (let button of this._save_buttons)
            {
                button.setAttribute("disabled", '');
            }
        } else {
            for (let button of this._save_buttons)
            {
                button.removeAttribute("disabled");
            }
        }
    }

    async save()
    {
        let fetch_data = await fetch(
            "/classes/{{ ue_id }}/set-content",
            {
                method: "POST",
                body: JSON.stringify(
                    {
                        "content": JSON.stringify(this._main_section.json_data)
                    }
                )
            }
        );

        return fetch_data.status === 202;
    }

}

window.addEventListener("load", async () => {
    await new UeEditScript(
        document.getElementById("class-title"),
        document.getElementById("content-display"),
        [
            document.getElementById("save-button-top"),
            document.getElementById("save-button-bottom")
        ],
        new TabsSelector(document.getElementById("class-tabs"))
    ).start();
});

</script>

{% endblock %}
