{% extends "base.html.twig" %}

{% block title %}
Éditer un utilisateur
{% endblock %}

{% block body %}

<div id="edit-page-main-separation" class="content-separator">
    <div id="edit-page-content">
        <h1> Éditer l'utilisateur - {{ account.surname }} {{ account.name }} </h1>
        <div class="tabs-container" id="edit-user-tabs">
            <div class="tabs-buttons">
                <button id="view-tab-button">Paramètres généraux</button>
                <button id="edit-tab-button">Rôles</button>
                <button id="edit-tab-button">Cours inscrits</button>
            </div>

            <div class="tabs-content" id="content-display">
                <div class="edit-user-settings-panel">
                    <h2> Adresse mail </h2>
                    <div class="settings-row">
                        <label> Adresse mail : </label> <input id="user-mail-input" value="{{ account.email }}"/>
                    </div>
                    <button id="save-user-mail-button" class="main-button icon-button">
                        <img src="{{ asset("/images/icons/save.png") }}"/>
                        <span>Enregistrer</span>
                    </button>
                    <hr></hr>
                    <div class="user-profile-settings">
                        <div id="user-profile-settings-description">
                            <h2> Identité </h2>
                            <div class="settings-row">
                                <label> Prénom : </label> <input id="user-profile-surname-input" value="{{ account.surname }}"/>
                            </div>
                            <div class="settings-row">
                                <label> Nom : </label> <input id="user-profile-name-input" value="{{ account.name }}"/>
                            </div>
                            <h2> Description </h2>
                            <textarea id="user-profile-description-input">{{ account.description }}</textarea>
                        </div>
                        <div id="user-profile-settings-image">
                            <h2> Photo de profil </h2>
                            <div class="image-edit">
                                <img class="edit-image" id="profile-user-image">
                                </img>
                                <button id="profile-user-image-button">
                                    <img src="{{ asset("images/icons/upload.png") }}"/>
                                </button>
                            </div>
                        </div>
                    </div>
                    <button id="save-user-profile-button" class="main-button icon-button">
                        <img src="{{ asset("/images/icons/save.png") }}"/>
                        <span>Enregistrer</span>
                    </button>
                    <hr></hr>
                    <h2> Zone à risques </h2>
                    <button id="delete-user-button" class="main-button icon-button"{% if base_config.current_user.id == account.id %} disabled{% endif %}>
                        <img src="{{ asset("/images/icons/delete.png") }}"/>
                        <span>Supprimer l'utilisateur</span>
                    </button>
                    {% if base_config.current_user.id == account.id %} 
                    <small> Vous ne pouvez pas vous supprimer vous-même </small>
                    {% endif %}
                </div>

                <div class="edit-user-settings-panel">
                    <h2>
                        Rôles de l'utilisateur
                    </h2>

                    <div class="checkboxes-list"{% if base_config.current_user.id == account.id %} disabled{% endif %}>

                        <div class="settings-row">
                            <label> Étudiant </label>
                            <div class="checkbox">
                                <input type="checkbox" id="account-role-student-checkbox"{% if "ROLE_STUDENT" in account.roles %}  checked{% endif %}{% if "ROLE_ADMIN" in account.roles or "ROLE_TEACHER" in account.roles %}  disabled{% endif %}>
                                <span class="checkbox-style"/>
                            </div>
                        </div>

                        <div class="settings-row">
                            <label> Enseignant </label>
                            <div class="checkbox">
                                <input type="checkbox" id="account-role-teacher-checkbox"{% if "ROLE_TEACHER" in account.roles %}  checked{% endif %}{% if "ROLE_STUDENT" in account.roles %}  disabled{% endif %}/>
                                <span class="checkbox-style"/>
                            </div>
                        </div>

                        <div class="settings-row">
                            <label> Administrateur </label>
                            <div class="checkbox">
                                <input type="checkbox" id="account-role-admin-checkbox"{% if "ROLE_ADMIN" in account.roles %}  checked{% endif %}{% if "ROLE_STUDENT" in account.roles %}  disabled{% endif %}/>
                                <span class="checkbox-style"/>
                            </div>
                        </div>


                        <button id="save-user-roles-button" class="main-button icon-button">
                            <img src="{{ asset("/images/icons/save.png") }}"/>
                            <span>Enregistrer</span>
                        </button>
                    </div>

                    {% if base_config.current_user.id == account.id %} 
                    <small>
                        Vous ne pouvez pas modifier vos propres rôles 
                    </small>
                    {% else %}
                    <small>
                        Un étudiant ne peut être ni enseignant, ni administrateur. 
                    </small>
                    {% endif %}
                </div>

                <div class="edit-user-settings-panel">
                    <h2>
                        Cours inscrits
                    </h2>

                    <div class="search-bar" id="classes-search-bar">
                        <input type="text" placeholder="Rechercher..."/>
                        <button class="icon-button main-button">
                            <img src="{{ asset("images/icons/search.png") }}"/>
                        </button>
                    </div>

                    <div id="classes" class="classes-list">
                        {% for class in user_classes %}

                        <a href="/class/{{ class.id }}" class="class-preview-link" target="_blank">
                            <div class="class-preview" style="background-image: url('data:image/png;base64,{{ class.thumbnail }}')">
                                {% if "ROLE_ADMIN" in base_config.current_user.roles or "ROLE_TEACHER" in base_config.current_user.roles %}
                                <span class="class-edit-icon">
                                    <img src="{{ asset("images/icons/edit.png") }}" />
                                </span>
                                {% endif %}
                                <h1>{{ class.name }}</h1>
                                <p>{{ class.description }}</p>
                            </div>
                        </a>
                        
                        {% endfor %}

                        <button id="add-class-button">
                            <img src="{{ asset("images/icons/edit.png") }}" />
                            <span class="class-edit-icon">
                                Ajouter / Supprimer des cours...
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {% include "sections/activity-thread.html.twig" %}
</div>

{% endblock %}

{% block javascripts %}

<script type="module">

import { SearchBar } from "{{ asset("/scripts/elements/SearchBar.js") }}";
import { SearchList } from "{{ asset("/scripts/elements/SearchList.js") }}";
import { TabsSelector } from "{{ asset("/scripts/elements/TabsSelector.js") }}";
import { ImageSelector } from "{{ asset("/scripts/elements/ImageSelector.js") }}";

import { ConfirmWidget } from "{{ asset("/scripts/widgets/ConfirmWidget.js") }}";
import { AlertWidget } from "{{ asset("/scripts/widgets/AlertWidget.js") }}";
import { SelectClassWidget } from "{{ asset("scripts/widgets/SelectClassWidget.js") }}";

class EditUserEmailScript
{
    constructor(email_input, email_button)
    {
        this._email_input = email_input;
        this._email_button = email_button;

        this._actual_email = "{{ account.email }}";

        this._email_input.addEventListener("input", () => {
            this.onFieldChange();
        });

        this._email_button.addEventListener("click", () => {
            this.onSaveClicked(this._email_input.value);
        });

        this.onFieldChange();
    }

    onFieldChange() 
    {
        if (!this._email_input.value.match(
                /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
            ) || this._email_input.value === this._actual_email
        )
        {
            this._email_button.setAttribute("disabled", "");
        } else {
            this._email_button.removeAttribute("disabled", "");
        }
    }

    async onSaveClicked(mail) 
    {
        let data = await fetch("/user/{{ account.id }}/set-mail", {
            method: "POST",
            body: JSON.stringify({
                mail: mail
            })
        });

        switch ( data.status )
        {
            case 202:
            await new AlertWidget("Utilisateur enregistré avec succès").main();
            this._actual_email = mail;
            this.onFieldChange();
            break;

            case 401:
            await new AlertWidget("Vous devez d'abord vous connecter").main();
            break;

            case 403:
            await new AlertWidget("Vous n'avez pas les permission nécessaires pour effectuer cette action").main();
            break;

            default:
            await new AlertWidget("Une erreur inconnue s'est produite (" + data.status + ")").main();
            break;
        }
    }
}

class EditUserProfileScript
{
    constructor(name_field, surname_field, description_field, profile_image, profile_image_button, save_button, base_profile_image)
    {
        this._name_field = name_field;
        this._surname_field = surname_field;
        this._description_field = description_field;

        this._profile_image = profile_image;
        this._profile_image_button = profile_image_button;

        this._profile_image_data = base_profile_image; // null when unchanged, base64 data when changed

        this._image_selector = new ImageSelector(this._profile_image_button, "data:img/png;base64," + base_profile_image,
            (base64_content) => {
                this.onImageSelected(base64_content);
            },
            1000,
            1000
        );

        this._save_button = save_button;

        this._name_field.addEventListener("input", () => {
            this.onFieldsChanged();
        });
        this._surname_field.addEventListener("input", () => {
            this.onFieldsChanged();
        });
        this._description_field.addEventListener("input", () => {
            this.onFieldsChanged();
        });

        this._save_button.addEventListener("click", () => {
            this.onSaveButtonClicked();
        });
    }

    async onImageSelected(base64_content)
    {
        this._profile_image.src = "data:image/png;base64," + base64_content;
    }

    onFieldsChanged() 
    {
        if (this._name_field.value === ""
         || this._surname_field.value === ""
         || this._description_field.value === "")
        {
            this._save_button.setAttribute("disabled", '');
        } else {
            this._save_button.removeAttribute("disabled");
        }
    }

    async onSaveButtonClicked()
    {
        let data = await fetch(
            "/user/{{ account.id }}/set-profile",
            {
                method: "POST",
                body: JSON.stringify({
                    name: this._name_field.value,
                    surname: this._surname_field.value,
                    description: this._description_field.value,
                    image: this._image_selector.base64_png_data
                }),
                headers: {
                    "Content-Type": "application/json",
                }
            }
        );

        switch ( data.status )
        {
            case 202:
            await new AlertWidget("Utilisateur enregistré avec succès").main();
            break;

            case 401:
            await new AlertWidget("Vous devez d'abord vous connecter").main();
            break;

            case 403:
            await new AlertWidget("Vous n'avez pas les permission nécessaires pour effectuer cette action").main();
            break;

            default:
            await new AlertWidget("Une erreur inconnue s'est produite (" + data.status + ")").main();
            break;
        }
    }
}

class SetUserRolesScript
{
    constructor(student_checkbox, teacher_checkbox, admin_checkbox, save_button)
    {
        this._student_checkbox = student_checkbox;
        this._teacher_checkbox = teacher_checkbox;
        this._admin_checkbox = admin_checkbox;

        this._save_button = save_button;

        this._student_checkbox.addEventListener("input", () => {
            this.onStudentChanged();
        });

        this._teacher_checkbox.addEventListener("input", () => {
            this.onTeacherChanged();
        });

        this._admin_checkbox.addEventListener("input", () => {
            this.onAdminChanged();
        });

        this._save_button.addEventListener("click", () => {
            this.onSaveClicked();
        });

        this.onRolesChanged();
    }

    onStudentChanged()
    {
        if (this._student_checkbox.checked)
        {
            this._teacher_checkbox.checked = false;
            this._admin_checkbox.checked = false;

            this._teacher_checkbox.disabled = true;
            this._admin_checkbox.disabled = true;
        } else {
            this._teacher_checkbox.disabled = false;
            this._admin_checkbox.disabled = false;
        }

        this.onRolesChanged();
    }

    onTeacherChanged()
    {
        if (this._teacher_checkbox.checked)
        {
            this._student_checkbox.checked = false;
            this._student_checkbox.disabled = true;
        } else if (!this._admin_checkbox.checked) {
            this._student_checkbox.disabled = false;
        }

        this.onRolesChanged();
    }

    onAdminChanged()
    {
        if (this._admin_checkbox.checked)
        {
            this._student_checkbox.checked = false;
            this._student_checkbox.disabled = true;
        } else if (!this._teacher_checkbox.checked) {
            this._student_checkbox.disabled = false;
        }

        this.onRolesChanged();
    }

    onRolesChanged()
    {
        if ((this._student_checkbox.checked && (this._teacher_checkbox.checked || this._admin_checkbox.checked))
            || !(this._student_checkbox.checked || this._teacher_checkbox.checked || this._admin_checkbox.checked))
        {
            this._save_button.disabled = true;
        } else {
            this._save_button.disabled = false;
        }
    }

    async onSaveClicked()
    {
        let request = await fetch("/user/{{ account.id }}/set-roles", {
            method: "POST",
            body: JSON.stringify({
                student: this._student_checkbox.checked,
                teacher: this._teacher_checkbox.checked,
                admin: this._admin_checkbox.checked,
            })
        });
        
        switch (request.status) {
            case 202:
            await new AlertWidget("Modifications enregistrées", "Les rôles ont été appliqués avec succès").main();
            break;
        
            case 401:
            await new AlertWidget("Impossible de modifier l'utilisateur", "Vous devez d'abord vous connecter").main();
            break;

            case 403:
            await new AlertWidget("Impossible de modifier l'utilisateur", "Vous n'avez pas les permissions requises pour effectuer cette action. ").main();
            break;

            case 423:
            await new AlertWidget("Impossible de modifier l'utilisateur", "Vous ne pouvez pas vous modifier vous-même ").main();
            break;

            default:
            await new AlertWidget("Impossible de modifier l'utilisateur", "erreur inconnue (" + request.status + ":" + await request.text() + ")").main();
            break;
        }
    }
}

class UserClassesScript
{
    constructor(classes_ids, classes_list_div, classes_search_bar, add_classes_button)
    {
        this._classes_ids = classes_ids;

        this._classes_list_div = classes_list_div;
        this._classes_search_bar = new SearchBar(classes_search_bar);
        this._classes_search_list = new SearchList(this._classes_search_bar, classes_list_div);

        this._add_classes_button = add_classes_button;
        add_classes_button.addEventListener("click", async () => {
            await this.selectClasses();
        });
    }
    async refreshClasses()
    {
        let nre = this._classes_search_list.no_result_element;
        this._classes_list_div.innerHTML = "";
        this._classes_list_div.appendChild(nre);

        let url = "/classes/list?max-count=50&ids=";

        for (let index=0; index < this._classes_ids.length; ++index)
        {
            if (index > 0) url += ",";
            url += this._classes_ids[index];
        }

        let classes_data = await fetch(url);
        let classes = await classes_data.json();

        for (let classe of classes)
        {
            let class_link = this._classes_list_div.appendChild(document.createElement("a"));
            class_link.classList.add("class-preview-link");
            class_link.href = "/class/" + classe.id;
            class_link.target = "_blank";

            let class_div = class_link.appendChild(document.createElement("div"));
            class_div.classList.add("class-preview");

            console.log("url('data:image/png;base64," + classe.thumbnail + "');");

            class_div.style["background-image"] = "url('data:image/png;base64," + classe.thumbnail + "')";

            class_div.appendChild(document.createElement("h1")).innerHTML = classe.name;
            class_div.appendChild(document.createElement("p")).innerText = classe.description;

            document.getElementById("classes").appendChild(class_link);
        }
        this._classes_list_div.appendChild(this._add_classes_button);

    }

    async selectClasses()
    {
        let widget = new SelectClassWidget(
            (classe) => true, true, [...this._classes_ids]
        );

        let classes = await widget.main();

        if (classes !== null)
        {
            let last_classes = [...this._classes_ids];

            this._classes_ids = classes;

            this.refreshClasses();

            try {
                let set_classes_request = await fetch(
                    "/users/{{ account.id }}/set-classes",
                    {
                        method: "POST",
                        body: JSON.stringify(
                            {
                                "ids": classes
                            }
                        )
                    }
                );
            } catch (exc ) {
                this._classes_ids = last_classes;
            }

        }
    }
}

window.addEventListener("load", () => {
    new TabsSelector(document.getElementById("edit-user-tabs"));

    new EditUserEmailScript(
        document.getElementById("user-mail-input"),
        document.getElementById("save-user-mail-button"),
    );

    new EditUserProfileScript(
        document.getElementById("user-profile-name-input"),
        document.getElementById("user-profile-surname-input"),
        document.getElementById("user-profile-description-input"),
        document.getElementById("profile-user-image"),
        document.getElementById("profile-user-image-button"),
        document.getElementById("save-user-profile-button"),
        '{{ user_image }}'
    );

    new SetUserRolesScript(
        document.getElementById("account-role-student-checkbox"),
        document.getElementById("account-role-teacher-checkbox"),
        document.getElementById("account-role-admin-checkbox"),
        document.getElementById("save-user-roles-button")
    )

    new UserClassesScript([{% for class in user_classes %} {{ class.id}}, {% endfor %}],
        document.getElementById("classes"),
        document.getElementById("classes-search-bar"),
        document.getElementById('add-class-button')
    );

    document.getElementById("delete-user-button").addEventListener("click", async () => {
        if (await new ConfirmWidget("Êtes-vous sûr(e) de vouloir supprimer cet utilisateur?", "Cette action est irréversible").main())
        {
           let request = await fetch("/user/{{ account.id }}/delete", { method: "POST"});
            
            switch (request.status) {
                case 202:
                location.href = "/";
                break;
            
                case 401:
                await new AlertWidget("Impossible de supprimer l'utilisateur", "Vous devez d'abord vous connecter").main();
                break;

                case 403:
                await new AlertWidget("Impossible de supprimer l'utilisateur", "Vous n'avez pas les permissions requises pour effectuer cette action. ").main();
                break;

                case 423:
                await new AlertWidget("Impossible de supprimer l'utilisateur", "Vous ne pouvez pas vous supprimer vous-même ").main();
                break;

                default:
                await new AlertWidget("Impossible de supprimer l'utilisateur", "erreur inconnue (" + request.status + ":" + await request.text() + ")").main();
                break;
            }
        }
    })
});

</script>

{% endblock %}

